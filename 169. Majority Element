class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;

        //brute force approach 
        // for(int i=0;i<nums.length;i++)
        // {
        //     int cnt=0;
        //     for(int j=0;j<nums.length;j++)
        //     {
        //         if(nums[j]==nums[i])
        //         {
        //             cnt++;
        //         }
        //     }
        //     if(cnt>n/2)
        //     {
        //         return nums[i];
        //     }
        // }
        // return -1;

        //moore's voting algorithm
        // int freq = 0; int ans = 0;
        // for(int i = 0; i < n; i++)
        // {
        //     if(freq==0) 
        //         ans = nums[i];

        //     if(ans == nums[i])
        //         freq++;
        //     else 
        //         freq--;
        // }
        // add this when problem don't mention majority element always exists
        // int count = 0;
        // for(int val : nums)
        // {
        //     if(val == ans)
        //         count++;
        // }
        // if(count > n/2)
        //     return ans;
        // else 
        //     return -1;

        //collection map 
        HashMap<Integer, Integer> freq = new HashMap<>();
        for(int val : nums)
        {
            freq.put(val, freq.getOrDefault(val, 0)+1);

            if(freq.get(val) > n/2) return val;
        } 
        return -1;
    }
}
